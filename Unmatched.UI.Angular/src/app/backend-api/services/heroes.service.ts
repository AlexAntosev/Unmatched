/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiHeroesGet } from '../fn/heroes/api-heroes-get';
import { ApiHeroesGet$Params } from '../fn/heroes/api-heroes-get';
import { apiHeroesPlaystyleHeroIdPut } from '../fn/heroes/api-heroes-playstyle-hero-id-put';
import { ApiHeroesPlaystyleHeroIdPut$Params } from '../fn/heroes/api-heroes-playstyle-hero-id-put';
import { apiHeroesStatisticsGet } from '../fn/heroes/api-heroes-statistics-get';
import { ApiHeroesStatisticsGet$Params } from '../fn/heroes/api-heroes-statistics-get';
import { apiHeroesStatisticsHeroIdGet } from '../fn/heroes/api-heroes-statistics-hero-id-get';
import { ApiHeroesStatisticsHeroIdGet$Params } from '../fn/heroes/api-heroes-statistics-hero-id-get';
import { UiHeroDto } from '../models/ui-hero-dto';
import { UiHeroStatisticsDto } from '../models/ui-hero-statistics-dto';

@Injectable({ providedIn: 'root' })
export class HeroesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiHeroesGet()` */
  static readonly ApiHeroesGetPath = '/api/Heroes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHeroesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHeroesGet$Response(params?: ApiHeroesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UiHeroDto>>> {
    return apiHeroesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHeroesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHeroesGet(params?: ApiHeroesGet$Params, context?: HttpContext): Observable<Array<UiHeroDto>> {
    return this.apiHeroesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UiHeroDto>>): Array<UiHeroDto> => r.body)
    );
  }

  /** Path part for operation `apiHeroesStatisticsGet()` */
  static readonly ApiHeroesStatisticsGetPath = '/api/Heroes/statistics';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHeroesStatisticsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHeroesStatisticsGet$Response(params?: ApiHeroesStatisticsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UiHeroStatisticsDto>>> {
    return apiHeroesStatisticsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHeroesStatisticsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHeroesStatisticsGet(params?: ApiHeroesStatisticsGet$Params, context?: HttpContext): Observable<Array<UiHeroStatisticsDto>> {
    return this.apiHeroesStatisticsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UiHeroStatisticsDto>>): Array<UiHeroStatisticsDto> => r.body)
    );
  }

  /** Path part for operation `apiHeroesStatisticsHeroIdGet()` */
  static readonly ApiHeroesStatisticsHeroIdGetPath = '/api/Heroes/statistics/{heroId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHeroesStatisticsHeroIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHeroesStatisticsHeroIdGet$Response(params: ApiHeroesStatisticsHeroIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<UiHeroStatisticsDto>> {
    return apiHeroesStatisticsHeroIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHeroesStatisticsHeroIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiHeroesStatisticsHeroIdGet(params: ApiHeroesStatisticsHeroIdGet$Params, context?: HttpContext): Observable<UiHeroStatisticsDto> {
    return this.apiHeroesStatisticsHeroIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<UiHeroStatisticsDto>): UiHeroStatisticsDto => r.body)
    );
  }

  /** Path part for operation `apiHeroesPlaystyleHeroIdPut()` */
  static readonly ApiHeroesPlaystyleHeroIdPutPath = '/api/Heroes/playstyle/{heroId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiHeroesPlaystyleHeroIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiHeroesPlaystyleHeroIdPut$Response(params: ApiHeroesPlaystyleHeroIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiHeroesPlaystyleHeroIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiHeroesPlaystyleHeroIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiHeroesPlaystyleHeroIdPut(params: ApiHeroesPlaystyleHeroIdPut$Params, context?: HttpContext): Observable<void> {
    return this.apiHeroesPlaystyleHeroIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
