@using Unmatched.Dtos
@using Unmatched.Extensions
@using Unmatched.Constants
@using Action = System.Action
@inject NotificationService NotificationService

<EditForm Model=@Fighter>
    <fieldset class="wrapper">
        <legend class="title">@Title</legend>
        <img class="image" src="@Fighter.PlayerImageUrl"/>
        <img class="image" src="@Fighter.HeroImageUrl"/>
        <div>
            <label for="players">Player:</label>
            <InputSelect 
                ValueExpression="@(() => Fighter.PlayerId)" 
                Value=Fighter.PlayerId 
                ValueChanged="@((Guid value) => PlayerChanged(value))"
                name="Player" id="players" class="form-select transparent">
                @foreach (var player in Players)
                {
                    <option value="@player.Id"> @player.Name</option>
                }
            </InputSelect >
        </div>
        <div>
            <label for="hero">Hero:</label>
            <div style=" display: flex; flex-direction: row;">
                <InputSelect name="Hero" id="hero" class="form-select transparent" ValueExpression="@(() => Fighter.HeroId)"
                             Value="@Fighter.HeroId"
                             ValueChanged="@((Guid value) => HeroChanged(value))">
                    @foreach (var hero in Heroes)
                    {
                        <option value="@hero.Id"> @hero.Name</option>
                    }
                </InputSelect>
                <button style="border-width: 0; background: transparent;" @onclick="() => RandomizeHero(Fighter.HeroId)">🎲</button>
            </div>
        </div>
        <div>
            <label for="hp">HP:</label>
            <InputNumber @bind-Value=Fighter.HpLeft id="hp" class="form-control transparent"/>
        </div>
        <div>
            <label for="sidekick">Sidekick:</label>
            <InputText @bind-Value=Fighter.SidekickName id="sidekick" class="form-control transparent" disabled="true"/>
        </div>
        <div>
            <label for="sidekickHP">Sidekick HP:</label>
            <InputNumber @bind-Value=Fighter.SidekickHpLeft id="sidekickHP" class="form-control transparent"/>
        </div>
        <div>
            <label for="cardsLeft">Cards Left:</label>
            <InputNumber @bind-Value=Fighter.CardsLeft id="cardsLeft" class="form-control transparent"/>
        </div>
        <div>
            <label for="itemsUsed">Items Used:</label>
            <InputNumber @bind-Value=Fighter.ItemsUsed id="itemsUsed" class="form-control transparent"/>
        </div>
        <div>
            <label for="turn">Turn:</label>
            <InputNumber @bind-Value=Fighter.Turn id="turn" class="form-control transparent"/>
        </div>
        <div>
            <label for="actionsMade">Actions made:</label>
            <InputNumber @bind-Value=Fighter.ActionsMade id="actionsMade" class="form-control transparent"/>
        </div>
        <div>
            <label for="timeSpent">Time spent (in seconds):</label>
            <InputNumber @bind-Value=Fighter.TimeSpentInSeconds id="timeSpent" class="form-control transparent"/>
        </div>
        <div>
            <label for="isWinner">Winner:</label>
            <InputCheckbox @bind-Value=Fighter.IsWinner id="isWinner" class="form-check transparent"/>
        </div>

    </fieldset>
</EditForm>

@code {

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public List<HeroDto> Heroes { get; set; } = new();

    [Parameter]
    public List<PlayerDto> Players { get; set; } = new();

    [Parameter]
    public FighterDto Fighter { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        NotificationService.OnRandomizeFighter += RandomizeFighter;
    }

    private void HeroChanged(Guid heroId)
    {
        var hero = Heroes.First(h => h.Id == heroId);
        SetHeroInfo(hero);
    }
    
    private void PlayerChanged(Guid playerId) 
    {
        var player = Players.First(h => h.Id == playerId);
        Fighter.Player = player;
        Fighter.PlayerId = player.Id;
    }

    private void SetHeroInfo(HeroDto hero)
    {
        Fighter.Hero = hero;
        Fighter.HpLeft = hero.Hp;
        Fighter.HeroId = hero.Id;
        Fighter.SidekickName = hero.Sidekicks.FirstOrDefault()?.Name;
        Fighter.SidekickHpLeft = hero.Sidekicks.Sum(s => s.Hp * s.Count);
        Fighter.CardsLeft = hero.DeckSize;
        NotificationService.CallRequestRefresh();
    }

    private void RandomizeHero(params Guid[] exceptHeroIds)
    {
        var availableHeroes = Heroes.Select(x => x.Id).Except(exceptHeroIds).ToList();
        var randomHeroId = availableHeroes.GetRandomItem();
        var randomHero = Heroes.First(x => x.Id == randomHeroId);
        SetHeroInfo(randomHero);
    }
    
    private void RandomizeFighter(FighterDto targetFighter, FighterDto? exceptFighter = null)
    {
        var exceptPlayers = new List<Guid>();
        if (exceptFighter is not null)
        {
            exceptPlayers.Add(exceptFighter.PlayerId);
        }
        
        var availablePlayers = Players
            .Where(x => x.Name is PlayerNames.Andrii or PlayerNames.Oleksandr)
            .Select(x => x.Id)
            .Except(exceptPlayers)
            .ToList();
        
        var randomPlayerId = availablePlayers.GetRandomItem();
        var randomPlayer = Players.First(x => x.Id == randomPlayerId);

        targetFighter.Player = randomPlayer;
        targetFighter.PlayerId = randomPlayer.Id;
        
        var exceptHeroes = new List<Guid>();
        if (exceptFighter is not null)
        {
            exceptHeroes.Add(exceptFighter.HeroId);
        }
        RandomizeHero(exceptHeroes.Select(h => h).ToArray());
        
        targetFighter.ItemsUsed = 0;
    }
}

<style>
    .wrapper {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      column-gap: 32px;
      row-gap: 4px;
    }
    .title {
        grid-column-start: 1;
        grid-column-end: 3;
        grid-row-start: 1;
        grid-row-end: 2;
        text-align: center;
        opacity: 0.9 !important;
        color: white;
        text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
    }
    .image {
        height: 200px;
        border: 4px solid black;
        border-radius: 100%;
    }
    
    label {
        opacity: 0.9 !important;
        font-size: 20px;
        color: white;
        text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
    }
    
    .transparent {
        opacity: 0.9 !important;
    }
</style>