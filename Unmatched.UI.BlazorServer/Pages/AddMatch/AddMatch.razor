@page "/match/{id}"
@using Unmatched.Dtos
@using Unmatched.Services
@using Unmatched.Constants
@using Unmatched.Data.Enums
@using Unmatched.Extensions
@using BlazorBootstrap
@using Microsoft.AspNetCore.Components
@inject IMatchService MatchService
@inject IHeroService HeroService
@inject ITournamentService TournamentService
@inject IPlayerService PlayerService
@inject IMapService MapService
@inject NavigationManager NavManager
@inject NotificationService NotificationService

<div style="height: 100%; background: linear-gradient(90deg, @(_match.Fighters.FirstOrDefault()?.Hero?.Color ?? "white") 0%, @(_match.Fighters.LastOrDefault()?.Hero?.Color ?? "white") 100%);">
    <Modal @ref="matchSavedPopup" Title="Match successfully saved!">
        <BodyTemplate>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnPopupCloseClick">Close</Button>
        </FooterTemplate>
    </Modal>

    <div class="row">
        <div class="triple-column center" >
            <FighterInfo Title="Fighter" Players="_players" Heroes="_heroes" Fighter="@_match.Fighters.First()"></FighterInfo>
        </div>
        <div class="triple-column center">
            <img src="Vs.png"/>
        </div>
        <div class="triple-column center">
            <FighterInfo Title="Opponent" Players="_players" Heroes="_heroes" Fighter="@_match.Fighters.Last()"></FighterInfo>
        </div>
    </div>

    <div class="row">
        <div class="column end">
            <EditForm Model=@_match>
                <div>
                    <label for="Map">Map:</label>
                    <div style=" display: flex; flex-direction: row;">
                        <InputSelect Value="@_match.MapId" ValueExpression="@(() => _match.MapId)" name="Map" id="maps" class="form-select transparent rounded-form" ValueChanged="@((Guid value) => SetMapInfo(value))">
                            @foreach (var map in _maps)
                            {
                                <option value="@map.Id"> @map.Name</option>
                            }
                        </InputSelect >
                        <button style="border-width: 0; background: transparent;" @onclick="RandomizeMap">🎲</button>
                    </div>
                </div>
                <div>
                    <label for="Tournament">Tournament:</label>
                    <InputSelect @bind-Value=_match.TournamentId name="Tournament" id="tournaments" class="form-select transparent rounded-form">
                        @foreach (var tournament in _tournaments)
                        {
                            <option value="@tournament.Id"> @tournament.Name</option>
                        }
                    </InputSelect >
                </div>
                <div>
                    <label for="Date">Date:</label>
                    <InputDate @bind-Value=_match.Date name="Date" class="form-control transparent rounded-form"/>
                </div>
                <div>
                    <label for="Comment">Comment:</label>
                    <InputText @bind-Value=_match.Comment name="Comment" class="form-control transparent rounded-form"/>
                </div>
                <div>
                    <label for="Stage">Stage:</label>
                    <InputSelect @bind-Value=_match.Stage name="Stage" id="stages" class="form-select transparent rounded-form">
                        @foreach (var stage in _stages)
                        {
                            <option value="@stage.Item1"> @stage.Item2</option>
                        }
                    </InputSelect >
                </div>
                <p></p>
                <button class="btn btn-primary rounded-form" @onclick="OnAddNewMatchClickAsync">Add match</button>
                <button class="btn btn-secondary rounded-form" @onclick="OnRandomizeMatchClick">Randomize</button>
            </EditForm>
        </div>
        <div class="column start">
            <img style="border: 4px solid black;" src="@_match.Map?.ImageUrl"/>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private List<PlayerDto> _players = new();
    private List<HeroDto> _heroes = new();
    private List<MapDto> _maps = new();
    private List<TournamentDto> _tournaments = new();
    private List<(Stage?, string)> _stages = new();

    MatchDto _match = new()
        {
            Fighters = new List<FighterDto>()
                {
                    new(),
                    new()
                },
            Map = new()
                {
                    Name = "UnknownMap"
                },
            Date = DateTime.UtcNow
        };

    [Inject] protected PreloadService PreloadService { get; set; }
    
    private Modal matchSavedPopup = default!;

    protected override async Task OnInitializedAsync()
    {
        NotificationService.RefreshRequested += RerenderComponent;
        try
        {
            PreloadService.Show();
            
            _players = (await PlayerService.GetAsync()).ToList();
            _heroes = (await HeroService.GetAsync()).ToList();
            _maps = (await MapService.GetAsync()).ToList();
            _tournaments = (await TournamentService.GetAsync()).ToList();
            _stages = new List<(Stage?, string)>
                {
                    (null, ""),
                    (Stage.EighthFinals, Stage.EighthFinals.GetStageName()),
                    (Stage.QuarterFinals, Stage.QuarterFinals.GetStageName()),
                    (Stage.SemiFinals, Stage.SemiFinals.GetStageName()),
                    (Stage.ThirdPlaceDecider, Stage.ThirdPlaceDecider.GetStageName()),
                    (Stage.GrandFinals, Stage.GrandFinals.GetStageName())
                };

            var defaultTournament = _tournaments.FirstOrDefault(x => x.Name == TournamentNames.SilverhandTournament);
            if (defaultTournament != null)
            {
                _match.TournamentId = defaultTournament.Id;
            }
            
            var isValidId = Guid.TryParse(Id, out var id);
            if (!isValidId)
            {
                return;
            }
            if (id != Guid.Empty)
            {
                var match = await MatchService.GetAsync(id);
                match.Date = DateTime.UtcNow;
                match.Fighters.First().SetDefaultData();
                match.Fighters.Last().SetDefaultData();
                _match = match;
            }
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task OnAddNewMatchClickAsync()
    {
        try
        {
            PreloadService.Show();
            
            var match = _match;

            var isValidId = Guid.TryParse(Id, out var id);
            if (!isValidId)
            {
                return;
            }

            // temporary solution to avoid EF exception of tracking Map during update
            match.Map = null;

            SaveMatchResultDto result; 
            if (id == Guid.Empty)
            {
                result = await MatchService.AddAsync(match);

            }
            else
            {
                result = await MatchService.UpdateAsync(match);
            }
            
            var parameters = new Dictionary<string, object>
                {
                    {
                        "Result", result
                    }
                };
            await matchSavedPopup.ShowAsync<MatchSavedPopup>(title: "Match successfully saved!", parameters: parameters);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void OnRandomizeMatchClick()
    {
        RandomizeMap();
        RandomizeFighter();
        RandomizeOpponent();
    }
    
    private void RandomizeMap()
    {
        var mapId = _maps.GetRandomItem().Id;
        SetMapInfo(mapId);
    }
    
    private void RandomizeFighter()
    {
        NotificationService.CallRandomizeFighter(_match.Fighters.First());
        _match.Fighters.First().Turn = 1;
    }
    
    private void RandomizeOpponent()
    {
        NotificationService.CallRandomizeFighter(_match.Fighters.Last(), _match.Fighters.First());
        _match.Fighters.Last().Turn = 2;
    }
    
    private async Task OnPopupCloseClick()
    {
        await matchSavedPopup.HideAsync();
        NavManager.NavigateTo(Urls.DuelMatchLog);
    }
    
    private void SetMapInfo(Guid mapId)
    {
        var map = _maps.First(h => h.Id == mapId);
        _match.Map = map;
        _match.MapId = mapId;
    }
    
    private void RerenderComponent()
    {
        StateHasChanged();
    }
}

<style>
    label {
        opacity: 0.9 !important;
        font-size: 20px;
        color: white;
        text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
    }
    
    .transparent {
        opacity: 0.9 !important;
    }
    
    .rounded-form {
        border-radius: 16px;
    }
</style>