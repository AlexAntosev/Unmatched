@page "/addMatch"
@using Unmatched.Dtos
@using Unmatched.Services
@using Unmatched.Constants
@using Unmatched.Entities
@using Unmatched.Enums
@inject IMatchService MatchService
@inject NavigationManager NavManager

<div class="page-content">
    <h1 class="page-title"></h1>

    <div class="row">
        <div class="column center">
            <FighterInfo @ref="FighterComponent" Title="Fighter" Players="_players" Heroes="_heroes"></FighterInfo>
        </div>
        <div class="column center">
            <FighterInfo @ref="OpponentComponent" Title="Opponent" Players="_players" Heroes="_heroes"></FighterInfo>
        </div>
    </div>

    <div class="row">
        <div class="triple-column"></div>
        <div class="triple-column center">
            <EditForm Model=@Match>
                <div>
                    <label for="Map">Map:</label>
                    <div style=" display: flex; flex-direction: row;">
                        <InputSelect @bind-Value=Match.MapId name="Map" id="maps" class="form-select">
                            @foreach (var map in _maps)
                            {
                                <option value="@map.Id"> @map.Name</option>
                            }
                        </InputSelect >
                        <button style="border-width: 0" @onclick="RandomizeMap">🎲</button>
                    </div>
                </div>
                <div>
                    <label for="Tournament">Tournament:</label>
                    <InputSelect @bind-Value=Match.TournamentId name="Tournament" id="tournaments" class="form-select">
                        @foreach (var tournament in _tournaments)
                        {
                            <option value="@tournament.Id"> @tournament.Name</option>
                        }
                    </InputSelect >
                </div>
                <div>
                    <label for="Date">Date:</label>
                    <InputDate @bind-Value=Match.Date name="Date" class="form-control"/>
                </div>
                <div>
                    <label for="Comment">Comment:</label>
                    <InputText @bind-Value=Match.Comment name="Comment" class="form-control"/>
                </div>
                <div>
                    <label for="Stage">Stage:</label>
                    <InputSelect @bind-Value=Match.Stage name="Stage" id="stages" class="form-select">
                        @foreach (var stage in _stages)
                        {
                            <option value="@stage.Item1"> @stage.Item2</option>
                        }
                    </InputSelect >
                </div>
                <p></p>
                <button class="btn btn-primary" @onclick="AddNewMatch">Add match</button>
                <button class="btn btn-secondary" @onclick="Randomize">Randomize</button>
            </EditForm>
        </div>
        <div class="triple-column"></div>
    </div>
</div>

@code {

    private List<PlayerDto> _players = new();

    private List<HeroDto> _heroes = new();

    private List<MapDto> _maps = new();

    private List<TournamentDto> _tournaments = new();
    private List<(Stage?, string)> _stages = new();

    public FighterInfo FighterComponent;

    public FighterInfo OpponentComponent;

    readonly MatchWithStageDto Match = new()
        {
            Date = DateTime.UtcNow
        };
    
    [Inject] protected BlazorBootstrap.PreloadService PreloadService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            _players = (await MatchService.GetAllPlayersAsync()).ToList();
            _heroes = (await MatchService.GetAllHeroesAsync()).ToList();
            _maps = (await MatchService.GetAllMapsAsync()).ToList();
            _tournaments = (await MatchService.GetAllTournamentsAsync()).ToList();
            _stages = new List<(Stage?, string)>
                {
                    (null, ""),
                    (Stage.EighthFinals, "1/8 Finals"),
                    (Stage.QuarterFinals, "Quarter Finals"),
                    (Stage.SemiFinals, "Semi Finals"),
                    (Stage.ThirdPlaceDecider, "Third Place Finals"),
                    (Stage.GrandFinals, "Grand Finals"),
                };

            var defaultTournament = _tournaments.FirstOrDefault(x => x.Name == TournamentNames.SilverhandTournament);
            if (defaultTournament != null)
            {
                Match.TournamentId = defaultTournament.Id;
            }
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task AddNewMatch()
    {
        var match = Match;
        var fighter = FighterComponent.BuildDto();
        var opponent = OpponentComponent.BuildDto();

        await MatchService.AddAsync(match, fighter, opponent);
        
        //TODO: if successful 
        var url = "/duelMatchLog";
        NavManager.NavigateTo(url);
    }

    private async Task Randomize()
    {
        RandomizeMap();
        
        RandomizeFighter(FighterComponent);
        FighterComponent.Fighter.Turn = 1;
        
        RandomizeFighter(OpponentComponent, FighterComponent);
        OpponentComponent.Fighter.Turn = 2;

    }
    
    private void RandomizeMap()
    {
        var mapIndex = new Random().Next(0, _maps.Count());
        Match.MapId = _maps.ToArray()[mapIndex].Id;
    }

    private void RandomizeFighter(FighterInfo targetFighterComponent, params FighterInfo[] exceptFighters)
    {
        var exceptPlayers = exceptFighters.Select(x => x.Fighter.PlayerId).ToArray();
        var availablePlayers = _players.Where(x => x.Name is PlayerNames.Andrii or PlayerNames.Oleksandr).Select(x => x.Id).Except(exceptPlayers).ToArray();
        
        var randomPlayerIndex = new Random().Next(0, availablePlayers.Count());
        var randomPlayerId = availablePlayers.ToArray()[randomPlayerIndex];
        var randomPlayer = _players.First(x => x.Id == randomPlayerId);
        
        targetFighterComponent.Fighter.PlayerId = randomPlayer.Id;
        
        var exceptHeroIds = exceptFighters.Select(x => x.Fighter.HeroId).ToArray();
        targetFighterComponent.RandomizeHero(exceptHeroIds);
        
        targetFighterComponent.Fighter.ItemsUsed = 0;
    }
}