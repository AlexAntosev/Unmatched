@page "/addMatch"
@using Unmatched.Dtos
@using Unmatched.Services
@using Unmatched.Constants
@inject IUnmatchedService UnmatchedService

<PageTitle>Add match</PageTitle>

@if (_maps == null
    || _players == null
    || _heroes == null
    || _tournaments == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row">
        <div class="column center">
            <FighterInfo @ref="FighterComponent" Title="Fighter" Players="_players" Heroes="_heroes"></FighterInfo>
        </div>
        <div class="column center">
            <FighterInfo @ref="OpponentComponent" Title="Opponent" Players="_players" Heroes="_heroes"></FighterInfo>
        </div>
    </div>

    <div class="row">
        <div class="triple-column"></div>
        <div class="triple-column center">
            <EditForm Model=@Match>
                <div>
                    <label for="Map">Map:</label>
                    <InputSelect @bind-Value=Match.MapId name="Map" id="maps" class="form-select">
                        @foreach (var map in _maps)
                        {
                            <option value="@map.Id"> @map.Name</option>
                        }
                    </InputSelect >
                </div>
                <div>
                    <label for="Tournament">Tournament:</label>
                    <InputSelect @bind-Value=Match.TournamentId name="Tournament" id="tournaments" class="form-select">
                        @foreach (var tournament in _tournaments)
                        {
                            <option value="@tournament.Id"> @tournament.Name</option>
                        }
                    </InputSelect >
                </div>
                <div>
                    <label for="Date">Date:</label>
                    <InputDate @bind-Value=Match.Date name="Date" class="form-control"/>
                </div>
                <div>
                    <label for="Comment">Comment:</label>
                    <InputText @bind-Value=Match.Comment name="Comment" class="form-control"/>
                </div>
                <p></p>
                <button class="btn btn-primary" @onclick="AddNewMatch">Add match</button>
                <button class="btn btn-secondary" @onclick="Randomize">Randomize</button>
            </EditForm>
        </div>
        <div class="triple-column"></div>
    </div>
}

@code {

    private IEnumerable<PlayerDto> _players;

    private IEnumerable<HeroDto> _heroes;

    private IEnumerable<MapDto> _maps;

    private IEnumerable<TournamentDto> _tournaments;

    public FighterInfo FighterComponent;

    public FighterInfo OpponentComponent;

    readonly MatchDto Match = new()
        {
            Date = DateTime.Today
        };

    protected override async Task OnInitializedAsync()
    {
        _players = await UnmatchedService.GetAllPlayersAsync();
        _heroes = await UnmatchedService.GetAllHeroesAsync();
        _maps = await UnmatchedService.GetAllMapsAsync();
        _tournaments = await UnmatchedService.GetAllTournamentsAsync();
    }

    private async Task AddNewMatch()
    {
        var match = Match;
        var fighter = FighterComponent.BuildDto();
        var opponent = OpponentComponent.BuildDto();

        await UnmatchedService.AddDuelMatchAsync(match, fighter, opponent);
    }

    private async Task Randomize()
    {
        RandomizeMap();
        RandomizeFighter(FighterComponent);
        RandomizeFighter(OpponentComponent);
    }

    private void RandomizeMap()
    {
        var mapIndex = new Random().Next(0, _maps.Count());
        Match.MapId = _maps.ToArray()[mapIndex].Id;
    }

    private void RandomizeFighter(FighterInfo fighterInfo)
    {
        fighterInfo.Fighter.PlayerId = _players.First(p => p.Name == PlayerNames.Andrii).Id;
        
        var heroIndex = new Random().Next(0, _heroes.Count());
        var hero = _heroes.ToArray()[heroIndex];
        fighterInfo.SetHeroInfo(hero);
        
        fighterInfo.Fighter.ItemsUsed = 0;
    }
}