@using Microsoft.AspNetCore.Components
@using Unmatched.Dtos
@using Unmatched.Services
@using Unmatched.Data.Enums
@using Unmatched.Extensions
@inject IMatchService MatchService
@inject ITournamentService TournamentService

<h3 class="match-stage-name">@Stage.GetStageName()</h3>
<div class="match-stage">
    @if (TournamentMatches.Any(m => m.Stage == Stage))
    {
        @foreach (var match in TournamentMatches.Where(m => m.Stage == Stage))
        {
            <TournamentRecord Match="match"></TournamentRecord>
        }   
    }
    else if(TournamentModel.CurrentStage + 1 == Stage)
    {
        <button class="btn btn-primary" onclick="@OnGenerateMatchesClick">Generate matches</button>
    }
</div>

@code {
    [Parameter]
    public TournamentDto TournamentModel { get; set; } = new();
    
    [Parameter]
    public Stage Stage { get; set; }

    [Parameter]
    public List<MatchDto> TournamentMatches { get; set; } = new();

    private async Task OnGenerateMatchesClick()
    {
        if (TournamentModel.CurrentStage == Stage.SemiFinals)
        {
            await TournamentService.CreateThirdPlaceDeciderMatchAsync(TournamentModel);
            return;
        }
        
        if (TournamentModel.CurrentStage == Stage.ThirdPlaceDecider)
        {
            await TournamentService.CreateGrandFinalMatchesAsync(TournamentModel);
            return;
        }

        await TournamentService.CreateNextStagePlannedMatchesAsync(TournamentModel);
    }
}

<style>    
    .match-stage-name {
        margin: 30px;
        font-weight: bold;
    }
    
    .match-stage {
        display: flex;
        justify-content: space-around;
        flex-direction: column;
        height: 700px;
        margin: 30px;
    }
</style>