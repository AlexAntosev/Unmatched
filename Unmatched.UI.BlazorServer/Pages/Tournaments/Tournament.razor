@page "/tournaments/{id}"
@using Unmatched.Services
@using Unmatched.Dtos
@using BlazorBootstrap
@using Unmatched.Enums
@inject ITournamentService TournamentService
@inject IMatchService MatchService

<div class="page-content">
    <h1 class="page-title" style="text-align: center">@TournamentModel.Name</h1>
    <div class="net">
        <div>
            <TournamentStage TournamentModel="TournamentModel" Stage="Stage.EighthFinals" StageMatches="octoFinals" Maps="_maps"></TournamentStage>
        </div>
        <div>
            <TournamentStage TournamentModel="TournamentModel" Stage="Stage.QuarterFinals" StageMatches="quarterFinals" Maps="_maps"></TournamentStage>
        </div>
        <div>
            <TournamentStage TournamentModel="TournamentModel" Stage="Stage.SemiFinals" StageMatches="semiFinalsMatches" Maps="_maps"></TournamentStage>
        </div>
        <div>
            <TournamentStage TournamentModel="TournamentModel" Stage="Stage.ThirdPlaceDecider" StageMatches="thirdPlaceFinalsMatches" Maps="_maps"></TournamentStage>
        </div>
        <div>
            <TournamentStage TournamentModel="TournamentModel" Stage="Stage.GrandFinals" StageMatches="finalsMatches" Maps="_maps"></TournamentStage>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private TournamentDto TournamentModel { get; set; } = new ();

    private List<MapDto> _maps = new();

    public List<MatchDto> octoFinals = new(); 
    public List<MatchDto> quarterFinals = new(); 
    public List<MatchDto> semiFinalsMatches = new(); 
    public List<MatchDto> thirdPlaceFinalsMatches = new(); 
    public List<MatchDto> finalsMatches = new();
    
    [Inject] protected PreloadService PreloadService { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            Guid.TryParse(Id, out var tournamentId);
            if (tournamentId == Guid.Empty)
            {
                return;
            }
            
            TournamentModel = await TournamentService.GetAsync(tournamentId);
            
            octoFinals = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.EighthFinals)).ToList();
            quarterFinals = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.QuarterFinals)).ToList();
            semiFinalsMatches = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.SemiFinals)).ToList();
            thirdPlaceFinalsMatches = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.ThirdPlaceDecider)).ToList();
            finalsMatches = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.GrandFinals)).ToList();
        }
        finally
        {
            PreloadService.Hide();
        }
    }
}

<style>
    .net {
          display: grid;
          grid-template-columns: repeat(5, 1fr);
    }
</style>