@page "/tournaments/{id}"
@using Unmatched.Services
@using Unmatched.Dtos
@using BlazorBootstrap
@using Unmatched.Entities
@inject ITournamentService TournamentService
@inject IMatchService MatchService

<div class="page-content">
    <h1 class="page-title" style="text-align: center">@TournamentModel.Name</h1>
    <div class="net">
        <div>
                <h3 class="match-stage-name">1/8 finals</h3>
                <div class="match-stage">
                    @if (octoFinals is not null && octoFinals.Count > 0)
                    {
                        @foreach (var match in octoFinals)
                        {
                            <TournamentRecord Match="match"></TournamentRecord>
                        }   
                    }
                    else if(TournamentModel.CurrentStage == Stage.Group)
                    {
                        <button class="btn btn-primary" onclick="@OnGenerateMatchesClick">Generate matches</button>
                    }
                </div>
        </div>
        <div>
                <h3 class="match-stage-name">Quater finals</h3>
                <div class="match-stage">
                    @if (quarterFinals is not null && quarterFinals.Count > 0)
                    {
                        @foreach (var match in quarterFinals)
                        {
                            <TournamentRecord Match="match"></TournamentRecord>
                        }
                    }
                    else if(TournamentModel.CurrentStage == Stage.OctoFinals)
                    {
                        <button class="btn btn-primary" onclick="@OnGenerateMatchesClick">Generate matches</button>
                    }
                </div>
        </div>
        <div>
                <h3 class="match-stage-name">Semi finals</h3>
                <div class="match-stage">
                    @if (semiFinalsMatches is not null && semiFinalsMatches.Count > 0)
                    {
                        @foreach (var match in semiFinalsMatches)
                        {
                            <TournamentRecord Match="match"></TournamentRecord>
                        }
                    }
                    else if(TournamentModel.CurrentStage == Stage.QuarterFinals)
                    {
                        <button class="btn btn-primary" onclick="@OnGenerateMatchesClick">Generate matches</button>
                    }
                </div>
        </div>
        <div>
                <h3 class="match-stage-name">3rd finals</h3>
                <div class="match-stage">
                    @if (thirdPlaceFinalsMatches is not null && thirdPlaceFinalsMatches.Count > 0)
                    {
                        @foreach (var match in thirdPlaceFinalsMatches)
                        {
                            <TournamentRecord Match="match"></TournamentRecord>
                        }
                    }
                    else if(TournamentModel.CurrentStage == Stage.SemiFinals)
                    {
                        <button class="btn btn-primary" onclick="@OnGenerateMatchesClick">Generate matches</button>
                    }
                </div>
        </div>
        <div>
                <h3 class="match-stage-name">Grand finals</h3>
                <div class="match-stage">
                    @if (finalsMatches is not null && finalsMatches.Count > 0)
                    {
                        @foreach (var match in finalsMatches)
                        {
                            <TournamentRecord Match="match"></TournamentRecord>
                        }
                    }
                    else if(TournamentModel.CurrentStage == Stage.ThirdPlaceFinals)
                    {
                        <button class="btn btn-primary" onclick="@OnGenerateMatchesClick">Generate matches</button>
                    }
                    else if(TournamentModel.CurrentStage == Stage.Finals)
                    {
                        <button class="btn btn-primary" onclick="@OnFinishTournamentClick">Finish tournament</button>
                    }
                </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private TournamentDto TournamentModel { get; set; } = new ();

    private List<MapDto> _maps = new();
    
    private bool isFinished;

    public List<MatchDto> octoFinals = new(); 
    public List<MatchDto> quarterFinals = new(); 
    public List<MatchDto> semiFinalsMatches = new(); 
    public List<MatchDto> thirdPlaceFinalsMatches = new(); 
    public List<MatchDto> finalsMatches = new();
    
    [Inject] protected PreloadService PreloadService { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            Guid.TryParse(Id, out var tournamentId);
            if (tournamentId == Guid.Empty)
            {
                return;
            }
            
            TournamentModel = await TournamentService.GetAsync(tournamentId);
            _maps = (await MatchService.GetAllMapsAsync()).ToList();
            
            octoFinals = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.OctoFinals)).ToList();
            quarterFinals = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.QuarterFinals)).ToList();
            semiFinalsMatches = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.SemiFinals)).ToList();
            thirdPlaceFinalsMatches = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.ThirdPlaceFinals)).ToList();
            finalsMatches = (await MatchService.GetByTournamentIdAsync(tournamentId, Stage.Finals)).ToList();
            if (finalsMatches.Count > 0)
            {
                isFinished = true;
            }
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    public async Task OnGenerateMatchesClick()
    {
        var matchStages = await MatchService.GetMatchStagesAsync();
        var currentStageWinners = TournamentModel.Matches
            .Where(tm => matchStages.Any(ms => ms.MatchId == tm.Id && ms.Stage == TournamentModel.CurrentStage))
            .Select(m => m.Fighters.FirstOrDefault(f => f.IsWinner))
            .ToList();

        //Migrate all match stages to correct order in enum 
        if (TournamentModel.CurrentStage == Stage.OctoFinals)
        {
            TournamentModel.CurrentStage = Stage.QuarterFinals;
        }        
        else if(TournamentModel.CurrentStage == Stage.Finals)
        {
            TournamentModel.CurrentStage = Stage.Finished;
        }
        else
        {
            TournamentModel.CurrentStage++;
        }
        
        currentStageWinners = Shuffle(currentStageWinners);
        
        var generatedMatches = new List<MatchDto>();
        for (var i = 0; i < currentStageWinners.Count / 2; i++)
        {
            var match = new MatchWithStageDto
                {
                    Stage = TournamentModel.CurrentStage,
                    Fighters = new List<FighterDto>
                        {
                            currentStageWinners[i],
                            currentStageWinners[i + 1]
                        },
                    TournamentId = TournamentModel.Id,
                    MapId = RandomizeMap()
                };
            generatedMatches.Add(match);
        }
        
        TournamentModel.Matches.AddRange(generatedMatches);
        // await TournamentService.UpdateAsync(TournamentModel);
    }
    
    public static List<FighterDto> Shuffle(List<FighterDto> list)
    {
        var random = new Random();
        var newShuffledList = new List<FighterDto>();
        var listCount = list.Count;
        for (var i = 0; i < listCount; i++)
        {
            var randomElementInList = random.Next(0, list.Count);
            newShuffledList.Add(list[randomElementInList]);
            list.Remove(list[randomElementInList]);
        }
        return newShuffledList;
    }
    
    private Guid RandomizeMap()
    {
        //Need to be distinct
        var mapIndex = new Random().Next(0, _maps.Count());
        return _maps.ToArray()[mapIndex].Id;
    }

    public async Task OnFinishTournamentClick()
    {
        TournamentModel.CurrentStage = Stage.Finished;
        await TournamentService.UpdateAsync(TournamentModel);
    }
}

<style>
    .net {
          display: grid;
          grid-template-columns: repeat(5, 1fr);
    }
    
    .match-stage-name {
        margin: 30px;
    }
    
    .match-stage {
        display: flex;
        justify-content: space-around;
        flex-direction: column;
        height: 700px;
        margin: 30px;
    }
</style>