@page "/tournaments"
@using Microsoft.AspNetCore.Components
@using Unmatched.Dtos
@using Unmatched.Services
@using Unmatched.Data.Enums
@using Unmatched.Extensions
@inject ITournamentService TournamentService
@inject NavigationManager NavManager

<div class="page-content">
    <h1 class="page-title">Tournaments</h1>
    <div style="margin-bottom: 16px">
        <SfGrid DataSource="@_tournaments" AllowPaging="true" AllowSorting="true">
            <GridEvents CommandClicked="OnCommandClick" OnRecordClick="RecordClickHandler" TValue="TournamentDto"></GridEvents>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(TournamentDto.Name) HeaderText="Tournament" Width="120"></GridColumn>
                <GridColumn Width="150">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div>
        <EditForm Model=@_addTournamentForm>
            <div style="width: 256px; margin-bottom: 8px">
                <label>Name:</label>
                <InputText @bind-Value=_addTournamentForm.Name name="Name" class="form-control"/>
            </div>
            <div style="width: 256px; margin-bottom: 8px">
                <label>Initial stage:</label>
                <InputSelect @bind-Value=_addTournamentForm.InitialStage name="InitialStage" id="stages" class="form-select">
                    @foreach (var stage in _stages)
                    {
                        <option value="@stage.Item1"> @stage.Item2</option>
                    }
                </InputSelect >
            </div>
            <div style="width: 256px; margin-bottom: 8px">
                <label>Tournament type:</label>
                <InputSelect @bind-Value=_addTournamentForm.Type name="Type" id="types" class="form-select">
                    @foreach (var type in _types)
                    {
                        <option value="@type.Item1"> @type.Item2</option>
                    }
                </InputSelect >
            </div>
            <button class="btn btn-primary" @onclick="OnAddTournamentClick">Add tournament</button>
        </EditForm>
    </div>
</div>

@code {
    private List<TournamentDto> _tournaments = new ();
    private readonly TournamentDto _addTournamentForm = new();
    private List<(Stage?, string)> _stages = new();
    private List<(TournamentType, string)> _types = new();
    
    [Inject] protected BlazorBootstrap.PreloadService PreloadService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _types = new List<(TournamentType, string)>
            {
                (TournamentType.Championship, "Championship"),
                (TournamentType.League, "League"),
            };
        _stages = new List<(Stage?, string)>
            {
                (null, ""),
                (Stage.EighthFinals, Stage.EighthFinals.GetStageName()),
                (Stage.QuarterFinals, Stage.QuarterFinals.GetStageName()),
                (Stage.SemiFinals, Stage.SemiFinals.GetStageName()),
                (Stage.ThirdPlaceDecider, Stage.ThirdPlaceDecider.GetStageName()),
                (Stage.GrandFinals, Stage.GrandFinals.GetStageName())
            };
        
        await RefreshTournamentsAsync();
    }
    
    private void RecordClickHandler(RecordClickEventArgs<TournamentDto> args)
    {
        var tournamentId = args.RowData.Id;
        var url = $"{Urls.Tournaments}/{tournamentId}";
        NavManager.NavigateTo(url);
    }

    private async Task RefreshTournamentsAsync()
    {
        try
        {
            PreloadService.Show();
            
            _tournaments = (await TournamentService.GetAsync()).ToList();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task OnAddTournamentClick()
    {
        if (IsInvalidTournamentName(_addTournamentForm.Name))
        {
            return;
        }
        
        await AddTournamentAsync(_addTournamentForm);
    }

    private bool IsInvalidTournamentName(string? tournamentName)
    {
        return tournamentName is null || tournamentName == string.Empty || _tournaments.Any(t => t.Name == tournamentName);
    }
    
    private async Task AddTournamentAsync(TournamentDto tournament)
    {
        try
        {
            PreloadService.Show();

            tournament.CurrentStage = tournament.InitialStage;
            var created = await TournamentService.AddAsync(tournament);
            await TournamentService.CreateInitialPlannedMatchesAsync(created);
            _tournaments = (await TournamentService.GetAsync()).ToList();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task OnCommandClick(CommandClickEventArgs<TournamentDto> args)
    {
        switch (args.CommandColumn.Type)
        {
            case CommandButtonType.Delete:
                await DeleteTournamentAsync(args.RowData.Id);
                break;
            case CommandButtonType.Edit:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task DeleteTournamentAsync(Guid id)
    {
        try
        {
            PreloadService.Show();
            
            await TournamentService.DeleteAsync(id);
            _tournaments = (await TournamentService.GetAsync()).ToList();
        }
        finally
        {
            PreloadService.Hide();
        }
    }
}