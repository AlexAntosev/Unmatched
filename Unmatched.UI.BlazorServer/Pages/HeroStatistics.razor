@page "/heroes-statistics/{id}"
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@inject IHeroStatisticsService HeroStatisticsService
@using BlazorBootstrap

<div style="margin-bottom: 16px">
    <HeroSummary Hero="Hero"></HeroSummary>
</div>
<div class="page-content">
    <StatisticsRecord Title="Antagonist" HeroMatches="_againstAntagonistMatches" IsAgainst="true"></StatisticsRecord>
    <TotalMatchesRecord Total="Hero.TotalMatches" Wins="Hero.TotalWins" Looses="Hero.TotalLooses" Kd="Hero.Kd"></TotalMatchesRecord>
    <DuelMatches matchLogEntries="matchLogEntries"></DuelMatches>
</div>
<div class="page-content">
    <h4> Rating: </h4>
    <h5>Current Place: @Hero.Place (@Hero.Points points)</h5>
    <LineChart @ref="lineChart" />
</div>

@code {
    [Parameter]
    public string id { get; set; }
    
    private IEnumerable<MatchLogDto> matchLogEntries;

    public HeroStatisticsDto Hero { get; set; } = new ()
        {
            Hero = new()
        };
    private LineChart lineChart;
    
    private IGrouping<string, FighterDto> _againstAntagonistMatches;

    public List<RatingChangeDto> RatingChanges = new();
    
    protected override async Task OnInitializedAsync()
    {
        var heroId = Guid.Parse(id);
        Hero = await HeroStatisticsService.GetHeroStatisticsAsync(heroId);
        matchLogEntries = (await HeroStatisticsService.GetHeroMatchesAsync(heroId)).OrderByDescending(x => x.Date).ToArray();
        foreach (var matchLogEntry in matchLogEntries)
        {
            matchLogEntry.Fighters = matchLogEntry.Fighters.OrderByDescending(x => x.HeroId == heroId);
        }

        _againstAntagonistMatches = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.HeroId != heroId))
            .GroupBy(f => f.HeroName)
            .OrderByDescending(g => g.Count(f => f.IsWinner))
            .ThenBy(g => g.Count(f => !f.IsWinner))
            .ThenByDescending(g => g.Select(f => f.HpLeft ?? 0).Sum())
            .ThenByDescending(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
            .FirstOrDefault();

        RatingChanges = await HeroStatisticsService.GetRatingChangesAsync(heroId);
        await UpdateChart();
    }

    private async Task UpdateChart()
    {
        var heroColor = new List<string>
            {
                Hero.Hero.Color
            };
        var data = new ChartData
            {
                Labels = RatingChanges.Select(c => c.Date).ToList(),
                Datasets = new List<IChartDataset>
                    {
                        new LineChartDataset
                            {
                                Label = Hero.HeroName,
                                Data = RatingChanges.Select(c => (double)c.Rating).ToList(),
                                BackgroundColor = heroColor,
                                BorderColor = heroColor,
                                BorderWidth = new List<double>{2},
                                HoverBorderWidth = new List<double>{4},
                                PointBackgroundColor = heroColor,
                                PointBorderColor = heroColor,
                                PointRadius = new List<int>{4},
                                PointHoverRadius = new List<int>{4}
                            }
                    }
            };
        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title.Text = "Rating changes";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font.Size = 20;

        options.Responsive = true;

        options.Scales.X.Title.Text = "Date";
        options.Scales.X.Title.Display = true;

        options.Scales.Y.Title.Text = "Rating";
        options.Scales.Y.Title.Display = true;
        await lineChart.UpdateAsync(data, options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var data = new ChartData
                {
                    Labels = RatingChanges.Select(c => c.Date).ToList(),
                    Datasets = new List<IChartDataset>()
                };

            var options = new LineChartOptions();

            await lineChart.InitializeAsync(data, options);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}