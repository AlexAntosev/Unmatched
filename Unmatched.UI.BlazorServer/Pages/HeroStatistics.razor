@page "/heroes-statistics/{id}"
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@inject IHeroStatisticsService HeroStatisticsService

<h3 align="center">@Hero.HeroName</h3>
<div style="margin-bottom: 16px">
    <HeroSummary Hero="Hero"></HeroSummary>
</div>
<div>
    <h4> Antagonist: @_antagonist (@_winsAgainstAntagonist wins / @_loosesAgainstAntagonist looses)</h4>
    <h4> Total Matches: @Hero.TotalMatches (@Hero.TotalWins / @Hero.TotalLooses) K\D : @Hero.Kd</h4>
    <DuelMatches matchLogEntries="matchLogEntries"></DuelMatches>
</div>

@code {
    [Parameter]
    public string id { get; set; }
    
    private IEnumerable<MatchLogDto> matchLogEntries;

    public HeroStatisticsDto Hero { get; set; } = new ()
        {
            Hero = new()
        };
    
    
    private string? _antagonist;
    private int? _winsAgainstAntagonist;
    private int? _loosesAgainstAntagonist;
    
    protected override async Task OnInitializedAsync()
    {
        var heroId = Guid.Parse(id);
        Hero = await HeroStatisticsService.GetHeroStatisticsAsync(heroId);
        matchLogEntries = (await HeroStatisticsService.GetHeroMatchesAsync(heroId)).OrderByDescending(x => x.Date).ToArray();
        foreach (var matchLogEntry in matchLogEntries)
        {
            matchLogEntry.Fighters = matchLogEntry.Fighters.OrderByDescending(x => x.HeroId == heroId);
        }
        
        var antagonist = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.HeroId != heroId))
            .GroupBy(f => f.HeroName)
            .OrderByDescending(g => g.Count(f => f.IsWinner))
            .ThenBy(g => g.Count(f => !f.IsWinner))
            .ThenByDescending(g => g.Select(f => f.HpLeft ?? 0).Sum())
            .ThenByDescending(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
            .FirstOrDefault();

        _antagonist = antagonist?.Key;
        _winsAgainstAntagonist = antagonist?.Where(f => !f.IsWinner).Count();
        _loosesAgainstAntagonist = antagonist?.Where(f => f.IsWinner).Count();
    }
}