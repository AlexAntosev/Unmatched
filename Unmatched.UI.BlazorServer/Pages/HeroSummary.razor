@using Unmatched.Dtos

<div style="background: linear-gradient(180deg, @Hero.Hero.Color 0%, rgba(255,255,255,1) 100%);">
    <h3 align="center" class="page-title">@Hero.HeroName</h3>
    <div class="wrapper page-content">
        <div class="image-container">
            @if (_imageSource is not null)
            {
                <img src="@_imageSource"/>
            }
        </div>
        <div>
           <h5>Current Place: @_hero.Place (@_hero.Points points)</h5>
           <img src="@($"/{(_hero.IsRanged ? "Ranged" : "Melee")}.png")" alt="@_hero.HeroId" width="64px" height="auto"/>
           <h5>Hp: @_hero.Hero.Hp</h5>
           <h5>Deck size: @_hero.Hero.DeckSize</h5> 
           <h5>Titles: @ShowTitles() </h5>
        </div>
        <div>
           @if (_hero.Hero.Sidekicks is not null && _hero.Hero.Sidekicks.Any())
           {
               var sidekick = _hero.Hero.Sidekicks.First();
               <h5>@_sidekickTitle: @sidekick.Name @_sidekicksSuffix</h5>
               <img src="@($"/{(sidekick.IsRanged ? "Ranged" : "Melee")}.png")" alt="@sidekick.Id" width="64px" height="auto"/>
               <h5>@_sidekickTitle Hp: @sidekick.Hp</h5>
           } 
        </div>
    </div>
</div>

@code {
    [Parameter]
    public HeroStatisticsDto Hero
    {
        get => _hero;
        set
        {
            _hero = value;
            _imageSource = $"/{value.HeroName}.png";
            if (value.Hero.Sidekicks is not null&& value.Hero.Sidekicks.Any())
            {
                _sidekickTitle = value.Hero.Sidekicks.First().Count > 1
                    ? "Sidekicks"
                    : "Sidekick";
                _sidekicksSuffix = value.Hero.Sidekicks.First().Count > 1
                    ? $"(x {value.Hero.Sidekicks.First().Count})"
                    : "";
            }
        }
    }
    
    private HeroStatisticsDto? _hero;
    private string? _imageSource;
    private string? _sidekickTitle;
    private string? _sidekicksSuffix;
    
    protected override async Task OnInitializedAsync()
    {
    }

    public string ShowTitles()
    {
        if (_hero is not null && _hero.Titles is not null && _hero.Titles.Count() > 0)
        {
            return String.Join(", ", _hero.Titles.Select(t => t.Name).ToArray());
        }

        return "";
    }
}

<style>
    .wrapper {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      column-gap: 32px;
      row-gap: 4px;
    }
    
    .image-container {
        width: 250px;
        height: 200px;
        text-align: center;
        display: block;
    }
    
    .container img {
        margin: auto;
        display: block;
    }             
</style>