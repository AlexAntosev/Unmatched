@page "/players-statistics/{id}"
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@inject IPlayerStatisticsService PlayerStatisticsService
@using BlazorBootstrap

<h3 align="center">@Player.PlayerName</h3>
<div style="margin-bottom: 16px">
    <img src="@imageSource" />
    <h4> Favorite: @_favorite (@_favoriteWins wins / @_favoriteLooses looses)</h4>
    <h4> Strongest hero: @_strongestHero (@_strongestHeroWins wins / @_strongestHeroLooses looses)</h4>
    <h4> Weakest hero: @_weakestHero (@_weakestHeroWins wins / @_weakestHeroLooses looses)</h4>
</div>

<h4> Total Matches: @Player.TotalMatches (@Player.TotalWins / @Player.TotalLooses) K\D : @Player.Kd</h4>
<DuelMatches matchLogEntries="matchLogEntries"></DuelMatches>

<div>
    <PieChart @ref="pieChart" Width="500" Class="mb-5"/>
</div>

@code {
    [Parameter]
    public string id { get; set; }
    
    private IEnumerable<MatchLogDto> matchLogEntries;

    public PlayerStatisticsDto Player { get; set; } = new ();

    private string? imageSource;
    private string? _favorite;
    private int? _favoriteWins;
    private int? _favoriteLooses;
    private string? _strongestHero;
    private int? _strongestHeroWins;
    private int? _strongestHeroLooses;
    private string? _weakestHero;
    private int? _weakestHeroWins;
    private int? _weakestHeroLooses;
    
    private PieChart pieChart = default!;
    private PieChartOptions pieChartOptions = default!;
    private ChartData chartData = default!;
    private List<string>? backgroundColors = new();
    private int dataCount;

    protected override async Task OnInitializedAsync()
    {
        var playerId = Guid.Parse(id);
        Player = await PlayerStatisticsService.GetPlayerStatisticsAsync(playerId);
        matchLogEntries = (await PlayerStatisticsService.GetPlayerMatchesAsync(playerId)).OrderByDescending(x => x.Date).ToArray();
        foreach (var matchLogEntry in matchLogEntries)
        {
            matchLogEntry.Fighters = matchLogEntry.Fighters.OrderByDescending(x => x.PlayerId == playerId);
        }
        imageSource = $"/{Player.PlayerName}.png";
        
        
        var favorite = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.PlayerId == playerId))
            .GroupBy(f => f.HeroName)
            .MaxBy(g => g.Count());

        _favorite = favorite?.Key;
        _favoriteWins = favorite?.Where(f => f.IsWinner).Count();
        _favoriteLooses = favorite?.Where(f => !f.IsWinner).Count();

        var strongestHero = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.PlayerId == playerId))
            .GroupBy(f => f.HeroName)
            .OrderByDescending(g => g.Count(f => f.IsWinner))
            .ThenByDescending(g => g.Select(f => f.HpLeft ?? 0).Sum())
            .ThenByDescending(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
            .FirstOrDefault();

        _strongestHero = strongestHero?.Key;
        _strongestHeroWins = strongestHero?.Where(f => f.IsWinner).Count();
        _strongestHeroLooses = strongestHero?.Where(f => !f.IsWinner).Count();
        
        var weakestHero = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.PlayerId == playerId))
            .GroupBy(f => f.HeroName)
            .OrderByDescending(g => g.Count(f => !f.IsWinner))
            .ThenBy(g => g.Select(f => f.HpLeft ?? 0).Sum())
            .ThenBy(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
            .FirstOrDefault();

        _weakestHero = weakestHero?.Key;
        _weakestHeroWins = weakestHero?.Where(f => f.IsWinner).Count();
        _weakestHeroLooses = weakestHero?.Where(f => !f.IsWinner).Count();
        
        var heroesFights = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.PlayerId == Player.PlayerId))
            .GroupBy(f => f.HeroName)
            .OrderByDescending(g => g.Count())
            .Take(12);
        
        chartData = new ChartData { Labels = GetDataLabels(heroesFights), Datasets = GetDataSets(heroesFights) };

        pieChartOptions = new();
        pieChartOptions.Responsive = true;
        pieChartOptions.Plugins.Title.Text = "Favorites";
        pieChartOptions.Plugins.Title.Display = true;
        
        await pieChart.UpdateAsync(chartData, pieChartOptions);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            chartData = new ChartData { Labels = new List<string>(), Datasets = new List<IChartDataset>() };
            pieChartOptions = new();
            await pieChart.InitializeAsync(chartData, pieChartOptions, plugins: new [] { "ChartDataLabels" });
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private List<string> GetDataLabels(IEnumerable<IGrouping<string, FighterDto>> heroesFights)
    {
        var labels = new List<string>();
        foreach (var heroFights in heroesFights)
        {
            labels.Add(heroFights.Key);
        }

        return labels;
    }
    
    private List<IChartDataset> GetDataSets(IEnumerable<IGrouping<string, FighterDto>> heroesFights)
    {
        var datasets = new List<IChartDataset>
            {
                GetDataset(heroesFights)
            };

        return datasets;
    }
    
    private PieChartDataset GetDataset(IEnumerable<IGrouping<string, FighterDto>> heroesFights)
    {
        var data = new List<double>();
        foreach (var heroFights in heroesFights)
        {
            dataCount += 1;
            backgroundColors.Add(heroFights.First().HeroColor);
            data.Add(heroFights.Count());
        }
        var dataset = new PieChartDataset()
            {
                Label = "Fights",
                Data = data,
                BackgroundColor = GetRandomBackgroundColors(),
                Datalabels = new PieChartDatasetDataLabels()
                    {
                        Anchor =  "center"
                    }
            };
        return dataset;
    }

    private List<string> GetRandomBackgroundColors()
    {
        var colors = new List<string>();
        for (var index = 0; index < dataCount; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }
}