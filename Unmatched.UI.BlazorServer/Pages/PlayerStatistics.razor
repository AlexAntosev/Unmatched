@page "/players-statistics/{id}"
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@inject IPlayerStatisticsService PlayerStatisticsService

<div style="margin-bottom: 16px">
    <PlayerSummary Player="Player" Matches="_matches" FavoriteColor="@_favoriteColor"></PlayerSummary>
</div>
<div class="page-content">
    <TotalMatchesRecord Total="Player.TotalMatches" Wins="Player.TotalWins" Looses="Player.TotalLooses" Kd="Player.Kd"></TotalMatchesRecord>
    <DuelMatches matchLogEntries="matchLogEntries" PageSize="10"></DuelMatches>
</div>

@code {
    [Parameter]
    public string id { get; set; }
    
    private IEnumerable<MatchLogDto> matchLogEntries;

    public PlayerStatisticsDto Player { get; set; } = new ();

    private IEnumerable<IGrouping<string, FighterDto>> _matches;
    private string? _favoriteColor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var playerId = Guid.Parse(id);
        Player = await PlayerStatisticsService.GetPlayerStatisticsAsync(playerId);
        matchLogEntries = (await PlayerStatisticsService.GetPlayerMatchesAsync(playerId)).OrderByDescending(x => x.Date).ToArray();
        foreach (var matchLogEntry in matchLogEntries)
        {
            matchLogEntry.Fighters = matchLogEntry.Fighters.OrderByDescending(x => x.PlayerId == playerId);
        }

        _matches = matchLogEntries
            .SelectMany(m => m.Fighters.Where(f => f.PlayerId == Player.PlayerId))
            .GroupBy(f => f.HeroName);
        
        
        var favoriteName = _matches.MaxBy(g => g.Count())?.Key;
        var favoriteMatch = matchLogEntries.FirstOrDefault(m => m.Fighters.Any(f => f.HeroName == favoriteName));
        _favoriteColor = favoriteMatch?.Fighters.FirstOrDefault(f => f.HeroName == favoriteName)?.HeroColor;
    }
}