@page "/titles"
@using Unmatched.Services
@using Unmatched.Dtos
@inject ITitleService TitleService
@inject IHeroService HeroService

<div class="page-content">
    <PageTitle>Titles</PageTitle>

    <h1 class="page-title">Titles</h1>

    @if (titles is null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div>
            <SfGrid DataSource="@titles" AllowPaging="true" AllowSorting="true">
                <GridEvents CommandClicked="OnCommandClicked" TValue="TitleDto"></GridEvents>
                <GridPageSettings PageSize="20"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(TitleDto.Name) HeaderText="Title" Width="120"></GridColumn>
                    <GridColumn HeaderText="Manage Records" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" Title="Assign" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
        <div>
            <EditForm Model=@Title>
                <div>
                    <label for="Name">Name:</label>
                    <InputText @bind-Value=Title.Name name="Name" class="form-control"/>
                </div>
                <button class="btn btn-primary" @onclick="AddAsync">Add title</button>
            </EditForm>
        </div>
        
        <div>
            <BlazorBootstrap.Modal @ref="modal" Title="Heroes">
                <BodyTemplate>
                    <SfGrid @ref="HeroesGrid" DataSource="@heroes" AllowSorting="true" AllowSelection="true">
                        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                        <GridPageSettings PageSize="10"></GridPageSettings>
                        <GridEvents RowDataBound="OnRowDataBound" DataBound="OnDataBound" TValue="HeroTitleAssignDto"></GridEvents>
                        <GridColumns>
                            <GridColumn Field=@nameof(HeroTitleAssignDto.IsAssigned) Type="ColumnType.CheckBox" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(HeroTitleAssignDto.Name) HeaderText="Hero" Width="120"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Secondary" @onclick="OnHideClick">Close</Button>
                    <Button Color="ButtonColor.Primary" @onclick="OnAssignClick">Assign</Button>
                </FooterTemplate>
            </BlazorBootstrap.Modal>
        </div>
    }
</div>

@code {
    private IEnumerable<TitleDto> titles;
    private IEnumerable<HeroTitleAssignDto> heroes;
    readonly TitleDto Title = new();
    private Guid SelectedTitleId = Guid.Empty;
    SfGrid<HeroTitleAssignDto> HeroesGrid;
    public List<int> SelectedIndexes = new();
    private BlazorBootstrap.Modal modal = default!;

    protected override async Task OnInitializedAsync()
    {
        titles = await TitleService.GetAsync();
    }

    public async Task AddAsync()
    {
        var title = Title;
        await TitleService.AddAsync(title);
        titles = await TitleService.GetAsync();
    }
    
    public async Task OnCommandClicked(CommandClickEventArgs<TitleDto> args)
    {
        if (args.CommandColumn.Type is CommandButtonType.Delete)
        {
            await TitleService.DeleteAsync(args.RowData.Id);
            titles = await TitleService.GetAsync();
        }
        
        if (args.CommandColumn.Type is CommandButtonType.Edit)
        {
            SelectedIndexes = new();
            SelectedTitleId = args.RowData.Id;
            heroes = await HeroService.GetHeroesForTitleAssign(SelectedTitleId);
            await modal.ShowAsync();
        }
    }
    
    private async Task OnHideClick()
    {
        await modal.HideAsync();
    }
    
    private async Task OnAssignClick()
    {
        await TitleService.MergeAsync(SelectedTitleId, HeroesGrid.SelectedRecords.Select(h => h.Id));
        await modal.HideAsync();
        titles = await TitleService.GetAsync();
    }
    
    public async Task  OnDataBound(object args)
    {
        await HeroesGrid.SelectRowsAsync(SelectedIndexes.ToArray());
    }

    public void OnRowDataBound(RowDataBoundEventArgs<HeroTitleAssignDto> args)
    {
        if (args.Data.IsAssigned)
        {
            var dataSource = HeroesGrid.DataSource;
            var index = 0;
            foreach (var data in dataSource)
            {
                if (data.Id == args.Data.Id)
                {
                    SelectedIndexes.Add(index);
                    break;
                }
                index++;
            }
        }
    }
}