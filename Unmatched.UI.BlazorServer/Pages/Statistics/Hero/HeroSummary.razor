@using Unmatched.Dtos
@using Unmatched.Services
@using Unmatched.Services.Contracts
@inject IPlayStyleService PlayStyleService

<div style="background: linear-gradient(180deg, @Statistics.Color 0%, rgba(255,255,255,1) 100%);">
    <div style="display: flex; align-items: center; justify-content: center;" >
        <h3 class="page-title">@Statistics.Name</h3>
        <button style="background-color: transparent; border: 0px" onclick="@UpdateHeroColor">✎</button>
        <input type="color" value="@Statistics.Color" onchange="@OnColorChange"/>
    </div>
    <div class="wrapper page-content">
        <div class="image-container">
            <img src="@Statistics.ImageUrl"/>
        </div>
        <div>
            <h5>Current Place: @_statistics.Place (@_statistics.Points points)</h5>
            <img style="margin-bottom: 0.5rem;" src="@_statistics.MeleeRangeImageUrl" alt="@_statistics.HeroId" width="64px" height="auto"/>
            <h5>Hp: @_statistics.Hp</h5>
            <h5>Deck size: @_statistics.DeckSize</h5>
            <h5>Titles: @ShowTitles() </h5>
        </div>
        <div>
            @if (IsAnySidekick())
            {
                var sidekick = _statistics.Sidekicks.First();
                <h5>@_sidekickTitle: @sidekick.Name @_sidekicksSuffix</h5>
                <img style="margin-bottom: 0.5rem;" src="@sidekick.MeleeRangeImageUrl" alt="@sidekick.Id" width="64px" height="auto"/>
                <h5>@_sidekickTitle Hp: @sidekick.Hp</h5>
            }
        </div>
        <div>
            @if (_statistics.PlayStyle is not null)
            {
                var playStyle = _statistics.PlayStyle;
                
                <h5>Attack: <Epic Rating="@playStyle.Attack" Max="3" RatingChanged="@((int rate) => PlayStyleAttackChanged(rate, playStyle))" /></h5>
                <h5>Defence: <Epic Rating="@playStyle.Defence" Max="3" RatingChanged="@((int rate) => PlayStyleDefenceChanged(rate, playStyle))"/></h5>
                <h5>Trickery: <Epic Rating="@playStyle.Trickery" Max="3" RatingChanged="@((int rate) => PlayStyleTrickeryChanged(rate, playStyle))"/></h5>
                <h5>Difficulty: <Epic Rating="@playStyle.Difficulty" Max="3" RatingChanged="@((int rate) => PlayStyleDifficultyChanged(rate, playStyle))"/></h5>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public UiHeroStatisticsDto Statistics
    {
        get => _statistics;
        set
        {
            _statistics = value;
            if (IsAnySidekick())
            {
                var sidekicksCount = _statistics.Sidekicks.First().Count;
                _sidekickTitle = sidekicksCount > 1
                    ? "Sidekicks"
                    : "Sidekick";
                _sidekicksSuffix = sidekicksCount > 1
                    ? $"(x {sidekicksCount})"
                    : "";
            }
        }
    }
    
    private UiHeroStatisticsDto _statistics = new();
    private string? _sidekickTitle;
    private string? _sidekicksSuffix;

    private string ShowTitles()
    {
        if (_statistics.Titles is not null && _statistics.Titles.Any())
        {
            return string.Join(", ", _statistics.Titles.Select(t => string.Concat(t.Name, " ", t.Comment)).ToArray());
        }

        return "";
    }

    private bool IsAnySidekick()
    {
        return _statistics.Sidekicks is not null && _statistics.Sidekicks.Any();
    }

    private void OnColorChange(ChangeEventArgs e)
    {
        _statistics.Color = e.Value?.ToString();
    }
    
    private void UpdateHeroColor()
    {
        var color = _statistics.Color;
    }
    
    private async Task PlayStyleAttackChanged(int rate, UiPlayStyleDto playStyle)
    {
        playStyle.Attack = rate;
        await PlayStyleService.AddOrUpdateAsync(_statistics.HeroId, playStyle);
    }
    
    private async Task PlayStyleDefenceChanged(int rate, UiPlayStyleDto playStyle)
    {
        playStyle.Defence = rate;
        await PlayStyleService.AddOrUpdateAsync(_statistics.HeroId, playStyle);
    }
    
    private async Task PlayStyleTrickeryChanged(int rate, UiPlayStyleDto playStyle)
    {
        playStyle.Trickery = rate;
        await PlayStyleService.AddOrUpdateAsync(_statistics.HeroId, playStyle);
    }
    
    private async Task PlayStyleDifficultyChanged(int rate, UiPlayStyleDto playStyle)
    {
        playStyle.Difficulty = rate;
        await PlayStyleService.AddOrUpdateAsync(_statistics.HeroId, playStyle);
    }
}

<style>
    .wrapper {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      column-gap: 32px;
      row-gap: 4px;
    }
    
    .image-container {
        width: 250px;
        height: 200px;
        text-align: center;
        display: block;
    }
    
    .container img {
        margin: auto;
        display: block;
    }             
</style>