@page "/heroes-statistics"
@using Microsoft.AspNetCore.Components
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@using Unmatched.Constants
@inject NavigationManager NavManager
@inject IHeroStatisticsService HeroStatisticsService

<div class="page-content">
    <h1 class="page-title">Heroes Statistics</h1>
    <SfGrid @ref="_grid" DataSource="@_heroes" AllowPaging="true" AllowSorting="true">
        <GridPageSettings PageSize="40"></GridPageSettings>
        <GridEvents QueryCellInfo="CustomizeCell" OnDataBound="OnDataBoundHandler" OnRecordClick="RecordClickHandler" TValue="UiHeroStatisticsDto"></GridEvents>
        <GridSortSettings>
            <GridSortColumns>
                <GridSortColumn Field="@nameof(UiHeroStatisticsDto.Points)" Direction="SortDirection.Descending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridColumns>
            <GridColumn Field=@nameof(UiHeroStatisticsDto.Place) Width="25" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Width="20">
                <Template>
                    @{
                        var hero = context as UiHeroStatisticsDto;
                        <div class="image">
                            <img src="@hero?.ImageUrl" alt="@hero.HeroId" width="100%" height="auto"/>
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="Name" HeaderText="Hero" Width="120"></GridColumn>
            <GridColumn Width="20">
                <Template>
                    @{
                        var hero = context as UiHeroStatisticsDto;
                        <div class="image">
                            <img src="@hero.MeleeRangeImageUrl" alt="@hero.HeroId" width="100%" height="auto"/>
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(UiHeroStatisticsDto.Points) HeaderText="Points" Width="120"></GridColumn>
            <GridColumn Field=@nameof(UiHeroStatisticsDto.TotalMatches) HeaderText="Matches" Width="80"></GridColumn>
            <GridColumn Field=@nameof(UiHeroStatisticsDto.TotalWins) HeaderText="Wins" Width="80"></GridColumn>
            <GridColumn Field=@nameof(UiHeroStatisticsDto.TotalLooses) HeaderText="Looses" Width="80"></GridColumn>
            <GridColumn Field=@nameof(UiHeroStatisticsDto.Kd) HeaderText="K/D" Width="50"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>

@code {
    private List<UiHeroStatisticsDto> _heroes = new();
    SfGrid<UiHeroStatisticsDto> _grid;
    
    [Inject] protected BlazorBootstrap.PreloadService PreloadService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            _heroes = (await HeroStatisticsService.GetHeroesStatisticsAsync()).OrderBy(x => x.Name).ToList();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private void RecordClickHandler(RecordClickEventArgs<UiHeroStatisticsDto> args)
    {
        var heroId = args.RowData.HeroId;
        var url = $"{Urls.HeroesStatistics}/{heroId}";
        NavManager.NavigateTo(url);
    }

    private void OnDataBoundHandler()
    {
        SetPlaces();
    }

    private void SetPlaces()
    {
        if (_grid.CurrentViewData is null)
        {
            return;
        }
        
        var dataSource = _grid.CurrentViewData;
        var place = 1;
        foreach (var data in dataSource)
        {
            if (data is UiHeroStatisticsDto hero)
            {
                hero.Place = place;
                place++;
            }
        }
    }

    private void CustomizeCell(QueryCellInfoEventArgs<UiHeroStatisticsDto> args)
    {
        if (args.Data.Place == 1)
        {
            args.Cell.AddClass(new [] { "champion-cell" });
        }
        
        if (args.Data.Place == 2)
        {
            args.Cell.AddClass(new [] { "second-place-cell" });
        }
        
        if (args.Data.Place > 2 && args.Data.Place <= 5)
        {
            args.Cell.AddClass(new [] { "leader-cell" });
        }
        
        if (args.Data.Place >= 30)
        {
            args.Cell.AddClass(new [] { "looser-cell" });
        }
    }
}

<style>
    .champion-cell {
        background-color: @Colors.Champion !important;
    }
    
    .second-place-cell {
        background-color: @Colors.SecondPlace !important;
    }
    
    .leader-cell {
        background-color: @Colors.Leader !important;
    }
    
    .looser-cell {
        background-color: @Colors.Looser !important;
    }
</style>