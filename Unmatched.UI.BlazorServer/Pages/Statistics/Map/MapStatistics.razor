@page "/maps-statistics/{id}"
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@inject IMapStatisticsService MapStatisticsService

<div class="page-content">
    <h3 align="center" class="page-title">@Statistics.Map?.Name</h3>
    <img src="@Statistics.Map?.ImageUrl" />
    <TotalMatchesRecord Total="Statistics.TotalMatches" ></TotalMatchesRecord>
    <StatisticsRecord Title="Map champ" HeroMatches="_mapChampMatches"></StatisticsRecord>
    <DuelMatches MatchLogEntries="_matchLogEntries"></DuelMatches>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = "";
    
    private List<MatchLogDto> _matchLogEntries = new();
    private MapStatisticsDto Statistics { get; set; } = new ();
    
    private IGrouping<string, FighterDto>? _mapChampMatches;
    
    [Inject] protected BlazorBootstrap.PreloadService PreloadService { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            var mapId = Guid.Parse(Id);
            Statistics = await MapStatisticsService.GetMapStatisticsAsync(mapId);
            _matchLogEntries = (await MapStatisticsService.GetMapMatchesAsync(mapId)).OrderByDescending(x => x.Date).ToList();
            foreach (var matchLogEntry in _matchLogEntries)
            {
                matchLogEntry.Fighters = matchLogEntry.Fighters.OrderByDescending(x => x.PlayerId == mapId);
            }
        
            _mapChampMatches = _matchLogEntries
                .SelectMany(m => m.Fighters.Where(f => f.IsWinner))
                .GroupBy(f => f.Hero.Name)
                .OrderByDescending(g => g.Count())
                .ThenByDescending(g => g.Select(f => f.HpLeft ?? 0).Sum())
                .ThenByDescending(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
                .FirstOrDefault();
        }
        finally
        {
            PreloadService.Hide();
        }
    }
}