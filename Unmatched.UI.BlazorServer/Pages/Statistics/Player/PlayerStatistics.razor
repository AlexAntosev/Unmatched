@page "/players-statistics/{id}"
@using Unmatched.Dtos
@using Unmatched.Services.Statistics
@inject IPlayerStatisticsService PlayerStatisticsService

<div style="margin-bottom: 16px">
    <PlayerSummary Player="Player" Matches="_matches" FavoriteColor="@_favoriteColor"></PlayerSummary>
</div>
<div class="page-content">
    <TotalMatchesRecord Total="Player.TotalMatches" Wins="Player.TotalWins" Looses="Player.TotalLooses" Kd="Player.Kd"></TotalMatchesRecord>
    <DuelMatches MatchLogEntries="_matchLogEntries" PageSize="10"></DuelMatches>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = "";
    
    private List<MatchLogDto> _matchLogEntries = new();
    private List<IGrouping<string, FighterDto>> _matches = new();

    private PlayerStatisticsDto Player { get; set; } = new ();

    private string _favoriteColor = "rgba(255,255,255,1)";
    
    [Inject] protected BlazorBootstrap.PreloadService PreloadService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            Guid.TryParse(Id, out var playerId);
            if (playerId == Guid.Empty)
            {
                return;
            }
            
            Player = await PlayerStatisticsService.GetPlayerStatisticsAsync(playerId);
            _matchLogEntries = (await PlayerStatisticsService.GetPlayerMatchesAsync(playerId)).OrderByDescending(x => x.Date).ToList();
            foreach (var matchLogEntry in _matchLogEntries)
            {
                matchLogEntry.Fighters = matchLogEntry.Fighters.OrderByDescending(x => x.PlayerId == playerId);
            }

            _matches = _matchLogEntries
                .SelectMany(m => m.Fighters.Where(f => f.PlayerId == Player.PlayerId))
                .GroupBy(f => f.HeroName)
                .ToList();

            var favoriteName = _matches.MaxBy(g => g.Count())?.Key;
            var favoriteMatch = _matchLogEntries.FirstOrDefault(m => m.Fighters.Any(f => f.HeroName == favoriteName));
            _favoriteColor = favoriteMatch?.Fighters.FirstOrDefault(f => f.HeroName == favoriteName)?.HeroColor ?? "rgba(255,255,255,1)";
        }
        finally
        {
            PreloadService.Hide();
        }
    }
}