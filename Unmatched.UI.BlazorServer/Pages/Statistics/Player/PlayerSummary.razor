@using Unmatched.Dtos

<div style="background: linear-gradient(180deg, @FavoriteColor 0%, rgba(255,255,255,1) 100%);">
    <h3 align="center" class="page-title">@Statistics.Player?.Name</h3>
    <div class="wrapper page-content">
        <div class="image-container">
            <img src="@Statistics.Player?.ImageUrl"/>
        </div>
        <div>
            <StatisticsRecord Title="Favorite" HeroMatches="_favoriteMatches"></StatisticsRecord>
            <StatisticsRecord Title="Strongest hero" HeroMatches="_strongestHeroMatches"></StatisticsRecord>
            <StatisticsRecord Title="Weakest hero" HeroMatches="_weakestHeroMatches"></StatisticsRecord>
            <h4>Titles:</h4>
        </div>
        <div>
            <HeroesMatchesPieChart HeroesMatches="_favoritesMatches"></HeroesMatchesPieChart>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PlayerStatisticsDto Statistics { get; set; } = new();

    [Parameter]
    public List<IGrouping<string, FighterDto>> Matches
    {
        get => _matches;
        set
        {
            _matches = value;
            _favoriteMatches = _matches.OrderByDescending(g => g.Count()).FirstOrDefault();
            _strongestHeroMatches = _matches
                .OrderByDescending(g => g.Count(f => f.IsWinner))
                .ThenByDescending(g => g.Select(f => f.HpLeft ?? 0).Sum())
                .ThenByDescending(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
                .FirstOrDefault();
            _weakestHeroMatches = _matches
                .OrderByDescending(g => g.Count(f => !f.IsWinner))
                .ThenBy(g => g.Select(f => f.HpLeft ?? 0).Sum())
                .ThenBy(g => g.Select(f => f.SidekickHpLeft ?? 0).Sum())
                .FirstOrDefault();
            _favoritesMatches = _matches.OrderByDescending(g => g.Count()).Take(10).ToList();
        }
    }

    [Parameter]
    public string FavoriteColor { get; set; } = "rgba(255,255,255,1)";

    private List<IGrouping<string, FighterDto>> _matches = new();
    private IGrouping<string, FighterDto> _favoriteMatches;
    private IGrouping<string, FighterDto> _strongestHeroMatches;
    private IGrouping<string, FighterDto> _weakestHeroMatches;
    private List<IGrouping<string, FighterDto>> _favoritesMatches = new();
}

<style>
    .wrapper {
      display: grid;
      grid-template-columns: 1fr 3fr 1fr;
      column-gap: 32px;
      row-gap: 4px;
    } 
    
    .image-container {
        width: 250px;
        height: 200px;
        text-align: center;
        display: block;
    }
    
    .container img {
        margin: auto;
        display: block;
    }          
</style>