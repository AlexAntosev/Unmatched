@page "/titles"
@using Unmatched.Services
@using Unmatched.Dtos
@inject ITitleService TitleService
@inject IHeroService HeroService

<div class="page-content">
    <h1 class="page-title">Titles</h1>
    <div style="margin-bottom: 16px">
        <SfGrid DataSource="@_titles" AllowPaging="true" AllowSorting="true">
            <GridEvents CommandClicked="OnCommandClicked" TValue="TitleDto"></GridEvents>
            <GridPageSettings PageSize="20"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(TitleDto.Name) HeaderText="Title" Width="120"></GridColumn>
                <GridColumn Width="150">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" Title="Assign" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div>
        <EditForm Model=@_addTitleForm>
            <div style="width: 256px; margin-bottom: 8px">
                <label>Name:</label>
                <InputText @bind-Value=_addTitleForm.Name name="Name" class="form-control"/>
            </div>
            <button class="btn btn-primary" @onclick="AddAsync">Add title</button>
        </EditForm>
    </div>
    
    <div>
        <BlazorBootstrap.Modal @ref="_heroesDialog" Title="Heroes">
            <BodyTemplate>
                <SfGrid @ref="_heroesGrid" DataSource="@_heroes" AllowSorting="true" AllowSelection="true">
                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                    <GridPageSettings PageSize="10"></GridPageSettings>
                    <GridEvents RowDataBound="OnRowDataBound" DataBound="OnDataBound" TValue="HeroTitleAssignDto"></GridEvents>
                    <GridColumns>
                        <GridColumn Field=@nameof(HeroTitleAssignDto.IsAssigned) Type="ColumnType.CheckBox" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(HeroTitleAssignDto.Name) HeaderText="Hero" Width="120"></GridColumn>
                    </GridColumns>
                </SfGrid>
            </BodyTemplate>
            <FooterTemplate>
                <button class="btn btn-secondary" @onclick="OnHideClick">Close</button>
                <button class="btn btn-primary" @onclick="OnAssignClick">Assign</button>
            </FooterTemplate>
        </BlazorBootstrap.Modal>
    </div>
</div>

@code {
    private List<TitleDto> _titles = new ();
    private List<HeroTitleAssignDto> _heroes = new();
    private readonly TitleDto _addTitleForm = new();
    private Guid _selectedTitleId = Guid.Empty;
    private List<int> _selectedHeroesIndexes = new();

    SfGrid<HeroTitleAssignDto> _heroesGrid;
    private BlazorBootstrap.Modal _heroesDialog = default!;
    
    [Inject] protected BlazorBootstrap.PreloadService PreloadService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
            _titles = (await TitleService.GetAsync()).ToList();
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task AddAsync()
    {
        if (_addTitleForm.Name is null)
        {
            return;
        }
        
        if (_addTitleForm.Name == string.Empty)
        {
            return;
        }
        
        if (_titles.Any(t => t.Name ==_addTitleForm.Name))
        {
            return;
        }
        
        var title = _addTitleForm;
        await TitleService.AddAsync(title);
        _titles = (await TitleService.GetAsync()).ToList();
    }

    private async Task OnCommandClicked(CommandClickEventArgs<TitleDto> args)
    {
        switch (args.CommandColumn.Type)
        {
            case CommandButtonType.Delete:
                await TitleService.DeleteAsync(args.RowData.Id);
                _titles = (await TitleService.GetAsync()).ToList();
                break;
            case CommandButtonType.Edit:
                _selectedHeroesIndexes = new();
                _selectedTitleId = args.RowData.Id;
                _heroes = (await HeroService.GetHeroesForTitleAssign(_selectedTitleId)).ToList();
                await _heroesDialog.ShowAsync();
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }
    
    private async Task OnHideClick()
    {
        await _heroesDialog.HideAsync();
    }
    
    private async Task OnAssignClick()
    {
        await TitleService.MergeAsync(_selectedTitleId, _heroesGrid.SelectedRecords.Select(h => h.Id));
        await _heroesDialog.HideAsync();
        _titles = (await TitleService.GetAsync()).ToList();
    }

    private async Task  OnDataBound(object args)
    {
        await _heroesGrid.SelectRowsAsync(_selectedHeroesIndexes.ToArray());
    }

    private void OnRowDataBound(RowDataBoundEventArgs<HeroTitleAssignDto> args)
    {
        if (args.Data.IsAssigned)
        {
            var dataSource = _heroesGrid.DataSource;
            var index = 0;
            foreach (var data in dataSource)
            {
                if (data.Id == args.Data.Id)
                {
                    _selectedHeroesIndexes.Add(index);
                    break;
                }
                index++;
            }
        }
    }
}