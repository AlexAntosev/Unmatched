@using Unmatched.Dtos
@using Unmatched.Constants
@using System.Dynamic

<SfGrid DataSource="@GridData" AllowPaging="true" AllowSorting="true" AllowResizing="true">
    <GridPageSettings PageSize="@PageSize"></GridPageSettings>
    <GridEvents QueryCellInfo="CustomizeCell" TValue="ExpandoObject"></GridEvents>
    <GridColumns>
        <GridColumn Field="Date" Format="d" Type="ColumnType.Date" HeaderText="Date" Width="44" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field="Tournament" HeaderText="Tournament" Width="100"  HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field="Map" HeaderText="Map" Width="60" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn HeaderText="Fighter" HeaderTextAlign="TextAlign.Center" Width="300">
            <GridColumns>
                <GridColumn Width="20" Field="FighterPlayer" HeaderText="">
                    <Template>
                        @{
                            var record = context as dynamic;
                            <div class="image">
                                <img src="@record?.FighterPlayerImageUrl" width="100%" height="auto"/>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="FighterHero" HeaderText="Hero" Width="60" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="FighterHp" HeaderText="Hp (Sidekick)" Width="60" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="FighterCardsLeft" HeaderText="🎴" Width="25" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="FighterActionsMade" HeaderText="⚡" Width="25" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="FighterTimeSpent" HeaderText="⌛" Width="25" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="FighterPoints" HeaderText="Points" Width="40" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
            </GridColumns>
        </GridColumn>
        <GridColumn HeaderText="Opponent" HeaderTextAlign="TextAlign.Center" Width="300">
            <GridColumns>
                <GridColumn Width="20" Field="OpponentPlayer" HeaderText="">
                    <Template>
                        @{
                            var record = context as dynamic;
                            <div class="image">
                                <img src="@record?.OpponentPlayerImageUrl" width="100%" height="auto"/>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="OpponentHero" HeaderText="Hero" Width="60" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="OpponentHp" HeaderText="Hp (Sidekick)" Width="60" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="OpponentCardsLeft" HeaderText="🎴" Width="25" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="OpponentActionsMade" HeaderText="⚡" Width="25" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="OpponentTimeSpent" HeaderText="⌛" Width="25" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="OpponentPoints" HeaderText="Points" Width="40" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
            </GridColumns>
        </GridColumn>
        <GridColumn Field="Comment" HeaderText="Comment" Width="60" HeaderTextAlign="TextAlign.Center" TextAlign="TextAlign.Center"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    private List<MatchLogDto> _matchLogEntries = new();
    
    [Parameter]
    public List<MatchLogDto> MatchLogEntries {
        get => _matchLogEntries;
        set
        {
            _matchLogEntries = value;
            GridData = _matchLogEntries.Select(e =>
                {
                    dynamic d = new ExpandoObject();
                    d.Date = e.Date;
                    d.Tournament = e.TournamentName;
                    d.Map = e.MapName;
                    var fighter = e.Fighters.First();
                    d.FighterPlayerImageUrl = fighter.PlayerImageUrl;
                    d.FighterHero = fighter.Hero.Name;
                    d.FighterHp = $"{fighter.HpLeft}{(fighter.Hero.Sidekicks.Any() ? $" ({fighter.SidekickHpLeft})" : "")}";
                    d.FighterCardsLeft = fighter.CardsLeft;
                    d.FighterActionsMade = fighter.ActionsMade;
                    d.FighterTimeSpent = fighter.TimeSpentInSeconds;
                    d.FighterPoints = fighter.MatchPoints;
                    d.IsFighterWinner = fighter.IsWinner;
                    var opponent = e.Fighters.Last();
                    d.OpponentPlayerImageUrl = opponent.PlayerImageUrl;
                    d.OpponentHero = opponent.Hero.Name;
                    d.OpponentHp = $"{opponent.HpLeft}{(fighter.Hero.Sidekicks.Any() ? $" ({opponent.SidekickHpLeft})" : "")}";
                    d.OpponentCardsLeft = opponent.CardsLeft;
                    d.OpponentActionsMade = opponent.ActionsMade;
                    d.OpponentTimeSpent = opponent.TimeSpentInSeconds;
                    d.OpponentPoints = opponent.MatchPoints;
                    d.IsOpponentWinner = opponent.IsWinner;
                    d.Comment = e.Comment;
                    return d;
                }).Cast<ExpandoObject>().ToList();
        } }

    [Parameter]
    public int PageSize { get; set; } = 20;

    private List<ExpandoObject> GridData { get; set; } = new();

    private void CustomizeCell(QueryCellInfoEventArgs<ExpandoObject> args)
    {
        var isFighterWinner = ((dynamic)args.Data).IsFighterWinner;
        var isOpponentWinner = ((dynamic)args.Data).IsOpponentWinner;
        if (args.Column.Field is "FighterPlayer" or "FighterHero" or "FighterHp" or "FighterSidekickHp" or "FighterCardsLeft" or "FighterPoints" or "FighterActionsMade" or "FighterTimeSpent")
        {
            if (isFighterWinner)
            {
                args.Cell.AddClass(new [] { "winner-cell" });
            }
            else
            {
                args.Cell.AddClass(new [] { "looser-cell" });
            }
        }
        if (args.Column.Field is "OpponentPlayer" or "OpponentHero" or "OpponentHp" or "OpponentSidekickHp" or "OpponentCardsLeft" or "OpponentPoints" or "OpponentActionsMade" or "OpponentTimeSpent")
        {
            if (isOpponentWinner)
            {
                args.Cell.AddClass(new [] { "winner-cell" });
            }
            else
            {
                args.Cell.AddClass(new [] { "looser-cell" });
            }
        }
    }

    private string GetWinLooseColor(bool isWinner)
    {
        return isWinner
            ? Colors.Winner
            : Colors.Looser;
    }
}

<style>
    .winner-cell {
        background-color: @Colors.Winner !important;
    }
    
    .looser-cell {
        background-color: @Colors.Looser !important;
    }
</style>